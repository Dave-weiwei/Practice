{"uid":"b98d94741fc8a7d0","name":"test_reg[no-uppercase-password]","fullName":"tests.test_reg#test_reg","historyId":"5954d519d82088d18ed8a3fc1db1f2db","time":{"start":1753165037601,"stop":1753165037876,"duration":275},"status":"broken","statusMessage":"psycopg2.OperationalError: connection to server on socket \"/var/run/postgresql/.s.PGSQL.5432\" failed: No such file or directory\n\tIs the server running locally and accepting connections on that socket?","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1fe0b71e67c79b6ad2f27b61208a3710\")>\nuser = 'asdasd@gmail.com', pwd = '54654654', confirm = '54654654'\nexpected = False\nrequest = <FixtureRequest for <Function test_reg[no-uppercase-password]>>\n\n    @pytest.mark.parametrize(\"user, pwd, confirm, expected\", params_input)\n    \n    \n    def test_reg(driver, user, pwd, confirm, expected,request):\n        page=IndexPage(driver)\n        page.open()\n    \n        def do_test():\n            reg_result=page.reg(user, pwd, confirm)\n            assert reg_result == expected\n            result = query_user_and_password(user, pwd)\n            if reg_result:\n                # 驗證是否寫入資料庫\n                assert result is not None, \"應該成功註冊，但資料庫找不到\"\n                assert result[0] == user\n                assert result[1] == pwd\n            else:\n                assert result is None, \"預期註冊失敗，但資料竟然寫入資料庫了\"\n    \n                # 測試後刪除資料\n            if result:\n                delete_user(user)\n    \n        pic = extract_parametrize_id(request)\n>       use_try(driver, do_test, pic)\n\ntests/test_reg.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscr/for_try.py:33: in use_try\n    raise e  # 將錯誤拋出給 pytest 判斷為失敗\n    ^^^^^^^\nscr/for_try.py:15: in use_try\n    func()\ntests/test_reg.py:21: in do_test\n    result = query_user_and_password(user, pwd)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nscr/db_util.py:27: in query_user_and_password\n    conn = get_connection()\n           ^^^^^^^^^^^^^^^^\nscr/db_util.py:8: in get_connection\n    return psycopg2.connect(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndsn = '', connection_factory = None, cursor_factory = None\nkwargs = {'dbname': None, 'host': None, 'password': None, 'port': None, ...}\nkwasync = {}\n\n    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n        \"\"\"\n        Create a new database connection.\n    \n        The connection parameters can be specified as a string:\n    \n            conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n    \n        or using a set of keyword arguments:\n    \n            conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n    \n        Or as a mix of both. The basic connection parameters are:\n    \n        - *dbname*: the database name\n        - *database*: the database name (only as keyword argument)\n        - *user*: user name used to authenticate\n        - *password*: password used to authenticate\n        - *host*: database host address (defaults to UNIX socket if not provided)\n        - *port*: connection port number (defaults to 5432 if not provided)\n    \n        Using the *connection_factory* parameter a different class or connections\n        factory can be specified. It should be a callable object taking a dsn\n        argument.\n    \n        Using the *cursor_factory* parameter, a new default cursor factory will be\n        used by cursor().\n    \n        Using *async*=True an asynchronous connection will be created. *async_* is\n        a valid alias (for Python versions where ``async`` is a keyword).\n    \n        Any other keyword parameter will be passed to the underlying client\n        library: the list of supported parameters depends on the library version.\n    \n        \"\"\"\n        kwasync = {}\n        if 'async' in kwargs:\n            kwasync['async'] = kwargs.pop('async')\n        if 'async_' in kwargs:\n            kwasync['async_'] = kwargs.pop('async_')\n    \n        dsn = _ext.make_dsn(dsn, **kwargs)\n>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       psycopg2.OperationalError: connection to server on socket \"/var/run/postgresql/.s.PGSQL.5432\" failed: No such file or directory\nE       \tIs the server running locally and accepting connections on that socket?\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg2/__init__.py:122: OperationalError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1753165034043,"stop":1753165034476,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"psycopg2.OperationalError: connection to server on socket \"/var/run/postgresql/.s.PGSQL.5432\" failed: No such file or directory\n\tIs the server running locally and accepting connections on that socket?","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1fe0b71e67c79b6ad2f27b61208a3710\")>\nuser = 'asdasd@gmail.com', pwd = '54654654', confirm = '54654654'\nexpected = False\nrequest = <FixtureRequest for <Function test_reg[no-uppercase-password]>>\n\n    @pytest.mark.parametrize(\"user, pwd, confirm, expected\", params_input)\n    \n    \n    def test_reg(driver, user, pwd, confirm, expected,request):\n        page=IndexPage(driver)\n        page.open()\n    \n        def do_test():\n            reg_result=page.reg(user, pwd, confirm)\n            assert reg_result == expected\n            result = query_user_and_password(user, pwd)\n            if reg_result:\n                # 驗證是否寫入資料庫\n                assert result is not None, \"應該成功註冊，但資料庫找不到\"\n                assert result[0] == user\n                assert result[1] == pwd\n            else:\n                assert result is None, \"預期註冊失敗，但資料竟然寫入資料庫了\"\n    \n                # 測試後刪除資料\n            if result:\n                delete_user(user)\n    \n        pic = extract_parametrize_id(request)\n>       use_try(driver, do_test, pic)\n\ntests/test_reg.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscr/for_try.py:33: in use_try\n    raise e  # 將錯誤拋出給 pytest 判斷為失敗\n    ^^^^^^^\nscr/for_try.py:15: in use_try\n    func()\ntests/test_reg.py:21: in do_test\n    result = query_user_and_password(user, pwd)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nscr/db_util.py:27: in query_user_and_password\n    conn = get_connection()\n           ^^^^^^^^^^^^^^^^\nscr/db_util.py:8: in get_connection\n    return psycopg2.connect(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndsn = '', connection_factory = None, cursor_factory = None\nkwargs = {'dbname': None, 'host': None, 'password': None, 'port': None, ...}\nkwasync = {}\n\n    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n        \"\"\"\n        Create a new database connection.\n    \n        The connection parameters can be specified as a string:\n    \n            conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n    \n        or using a set of keyword arguments:\n    \n            conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n    \n        Or as a mix of both. The basic connection parameters are:\n    \n        - *dbname*: the database name\n        - *database*: the database name (only as keyword argument)\n        - *user*: user name used to authenticate\n        - *password*: password used to authenticate\n        - *host*: database host address (defaults to UNIX socket if not provided)\n        - *port*: connection port number (defaults to 5432 if not provided)\n    \n        Using the *connection_factory* parameter a different class or connections\n        factory can be specified. It should be a callable object taking a dsn\n        argument.\n    \n        Using the *cursor_factory* parameter, a new default cursor factory will be\n        used by cursor().\n    \n        Using *async*=True an asynchronous connection will be created. *async_* is\n        a valid alias (for Python versions where ``async`` is a keyword).\n    \n        Any other keyword parameter will be passed to the underlying client\n        library: the list of supported parameters depends on the library version.\n    \n        \"\"\"\n        kwasync = {}\n        if 'async' in kwargs:\n            kwasync['async'] = kwargs.pop('async')\n        if 'async_' in kwargs:\n            kwasync['async_'] = kwargs.pop('async_')\n    \n        dsn = _ext.make_dsn(dsn, **kwargs)\n>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       psycopg2.OperationalError: connection to server on socket \"/var/run/postgresql/.s.PGSQL.5432\" failed: No such file or directory\nE       \tIs the server running locally and accepting connections on that socket?\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg2/__init__.py:122: OperationalError","steps":[],"attachments":[{"uid":"e1726e4ad5c3a2c8","name":"no-uppercase-password","source":"e1726e4ad5c3a2c8.png","type":"image/png","size":11017},{"uid":"8c9bffa76fd1e45c","name":"stdout","source":"8c9bffa76fd1e45c.txt","type":"text/plain","size":297}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1753165039053,"stop":1753165039114,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_reg"},{"name":"host","value":"fv-az2246-312"},{"name":"thread","value":"4143-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_reg"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"confirm","value":"'54654654'"},{"name":"expected","value":"False"},{"name":"pwd","value":"'54654654'"},{"name":"user","value":"'asdasd@gmail.com'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c2ea593192e6b99c","status":"broken","statusDetails":"psycopg2.OperationalError: connection to server on socket \"/var/run/postgresql/.s.PGSQL.5432\" failed: No such file or directory\n\tIs the server running locally and accepting connections on that socket?","time":{"start":1753165036985,"stop":1753165037275,"duration":290}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b98d94741fc8a7d0.json","parameterValues":["'54654654'","False","'54654654'","'asdasd@gmail.com'"]}