{"uid":"405340b0b76fa23a","name":"test_reg[log_pass]","fullName":"tests.test_login#test_reg","historyId":"d2413aa576844e61c036f924851a0125","time":{"start":1755846602445,"stop":1755846605833,"duration":3388},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"b355d38c-5335-48de-9103-03ec82b6c15a\")>\nuser = 'ok858585ok@gmail.com', pwd = 'OK88468', expected = '登入成功'\nrequest = <FixtureRequest for <Function test_reg[log_pass]>>\n\n    @pytest.mark.parametrize(\"user, pwd, expected\", params)\n    \n    def test_reg(driver, user, pwd, expected,request):\n        page=IndexPage(driver)\n        page.open()\n    \n        def do_test():\n            result=page.login(user, pwd)\n            assert result == expected\n    \n    \n        pic = extract_parametrize_id(request)\n>       use_try(driver, do_test, pic)\n\ntests/test_login.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscr/for_try.py:33: in use_try\n    raise e  # 將錯誤拋出給 pytest 判斷為失敗\n    ^^^^^^^\nscr/for_try.py:15: in use_try\n    func()\ntests/test_login.py:17: in do_test\n    result=page.login(user, pwd)\n           ^^^^^^^^^^^^^^^^^^^^^\nscr/Index_page.py:101: in login\n    WebDriverWait(self.driver, 3).until(lambda d: d.find_element(By.ID,\"login-result\").text != \"\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b355d38c-5335-48de-9103-03ec82b6c15a\")>\nmethod = <function IndexPage.login.<locals>.<lambda> at 0x7f7414522ac0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1755846593783,"stop":1755846595359,"duration":1576},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"b355d38c-5335-48de-9103-03ec82b6c15a\")>\nuser = 'ok858585ok@gmail.com', pwd = 'OK88468', expected = '登入成功'\nrequest = <FixtureRequest for <Function test_reg[log_pass]>>\n\n    @pytest.mark.parametrize(\"user, pwd, expected\", params)\n    \n    def test_reg(driver, user, pwd, expected,request):\n        page=IndexPage(driver)\n        page.open()\n    \n        def do_test():\n            result=page.login(user, pwd)\n            assert result == expected\n    \n    \n        pic = extract_parametrize_id(request)\n>       use_try(driver, do_test, pic)\n\ntests/test_login.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscr/for_try.py:33: in use_try\n    raise e  # 將錯誤拋出給 pytest 判斷為失敗\n    ^^^^^^^\nscr/for_try.py:15: in use_try\n    func()\ntests/test_login.py:17: in do_test\n    result=page.login(user, pwd)\n           ^^^^^^^^^^^^^^^^^^^^^\nscr/Index_page.py:101: in login\n    WebDriverWait(self.driver, 3).until(lambda d: d.find_element(By.ID,\"login-result\").text != \"\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b355d38c-5335-48de-9103-03ec82b6c15a\")>\nmethod = <function IndexPage.login.<locals>.<lambda> at 0x7f7414522ac0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"cb353266be4340d0","name":"log_pass","source":"cb353266be4340d0.png","type":"image/png","size":32919},{"uid":"88bf85f22deaed85","name":"stdout","source":"88bf85f22deaed85.txt","type":"text/plain","size":120}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1755846605841,"stop":1755846606459,"duration":618},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"5939aa528554"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected","value":"'登入成功'"},{"name":"pwd","value":"'OK88468'"},{"name":"user","value":"'ok858585ok@gmail.com'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"405340b0b76fa23a.json","parameterValues":["'登入成功'","'OK88468'","'ok858585ok@gmail.com'"]}