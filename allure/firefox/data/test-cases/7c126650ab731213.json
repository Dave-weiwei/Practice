{"uid":"7c126650ab731213","name":"test_reg[valid-case-lowercase-password]","fullName":"tests.test_reg#test_reg","historyId":"2f3153412dd902dc22f9e071f56a4686","time":{"start":1755846646913,"stop":1755846651721,"duration":4808},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"32f86f1f-53d5-4b4f-9c00-24eb96767d6b\")>\nuser = 'asdasd@gmail.com', pwd = 's123Ok', confirm = 's123Ok', expected = True\nrequest = <FixtureRequest for <Function test_reg[valid-case-lowercase-password]>>\n\n    @pytest.mark.parametrize(\"user, pwd, confirm, expected\", params_input)\n    \n    \n    def test_reg(driver, user, pwd, confirm, expected,request):\n        page=IndexPage(driver)\n        page.open()\n    \n        def do_test():\n            delete_user(user)\n            try:\n                reg_result=page.reg(user, pwd, confirm)\n                assert reg_result == expected\n                result = query_user_and_password(user, pwd)\n                if reg_result:\n                    # 驗證是否寫入資料庫\n                    assert result is not None, \"應該成功註冊，但資料庫找不到\"\n                    assert result[0] == user\n                    assert result[1] == pwd\n                else:\n                    assert result is None, \"預期註冊失敗，但資料竟然寫入資料庫了\"\n    \n            finally:\n                delete_user(user)\n    \n        pic = extract_parametrize_id(request)\n>       use_try(driver, do_test, pic)\n\ntests/test_reg.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscr/for_try.py:33: in use_try\n    raise e  # 將錯誤拋出給 pytest 判斷為失敗\n    ^^^^^^^\nscr/for_try.py:15: in use_try\n    func()\ntests/test_reg.py:21: in do_test\n    reg_result=page.reg(user, pwd, confirm)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nscr/Index_page.py:83: in reg\n    WebDriverWait(self.driver, 3).until(lambda d: d.find_element(By.ID, \"register-result\").text != \"\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"32f86f1f-53d5-4b4f-9c00-24eb96767d6b\")>\nmethod = <function IndexPage.reg.<locals>.<lambda> at 0x7f7414112f20>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1755846606461,"stop":1755846607980,"duration":1519},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"32f86f1f-53d5-4b4f-9c00-24eb96767d6b\")>\nuser = 'asdasd@gmail.com', pwd = 's123Ok', confirm = 's123Ok', expected = True\nrequest = <FixtureRequest for <Function test_reg[valid-case-lowercase-password]>>\n\n    @pytest.mark.parametrize(\"user, pwd, confirm, expected\", params_input)\n    \n    \n    def test_reg(driver, user, pwd, confirm, expected,request):\n        page=IndexPage(driver)\n        page.open()\n    \n        def do_test():\n            delete_user(user)\n            try:\n                reg_result=page.reg(user, pwd, confirm)\n                assert reg_result == expected\n                result = query_user_and_password(user, pwd)\n                if reg_result:\n                    # 驗證是否寫入資料庫\n                    assert result is not None, \"應該成功註冊，但資料庫找不到\"\n                    assert result[0] == user\n                    assert result[1] == pwd\n                else:\n                    assert result is None, \"預期註冊失敗，但資料竟然寫入資料庫了\"\n    \n            finally:\n                delete_user(user)\n    \n        pic = extract_parametrize_id(request)\n>       use_try(driver, do_test, pic)\n\ntests/test_reg.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscr/for_try.py:33: in use_try\n    raise e  # 將錯誤拋出給 pytest 判斷為失敗\n    ^^^^^^^\nscr/for_try.py:15: in use_try\n    func()\ntests/test_reg.py:21: in do_test\n    reg_result=page.reg(user, pwd, confirm)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nscr/Index_page.py:83: in reg\n    WebDriverWait(self.driver, 3).until(lambda d: d.find_element(By.ID, \"register-result\").text != \"\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"32f86f1f-53d5-4b4f-9c00-24eb96767d6b\")>\nmethod = <function IndexPage.reg.<locals>.<lambda> at 0x7f7414112f20>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"d7953851b4d635ce","name":"valid-case-lowercase-password","source":"d7953851b4d635ce.png","type":"image/png","size":30524},{"uid":"3db45d4616d0963","name":"stdout","source":"3db45d4616d0963.txt","type":"text/plain","size":141}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1755846651730,"stop":1755846652352,"duration":622},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_reg"},{"name":"host","value":"5939aa528554"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_reg"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"confirm","value":"'s123Ok'"},{"name":"expected","value":"True"},{"name":"pwd","value":"'s123Ok'"},{"name":"user","value":"'asdasd@gmail.com'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7c126650ab731213.json","parameterValues":["'s123Ok'","True","'s123Ok'","'asdasd@gmail.com'"]}