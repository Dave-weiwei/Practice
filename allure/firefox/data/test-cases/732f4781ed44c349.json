{"uid":"732f4781ed44c349","name":"test_reg[valid-case-short-domain]","fullName":"tests.test_reg#test_reg","historyId":"90bb6ba87927bc5203732274d6f1cb0d","time":{"start":1753167504069,"stop":1753167504425,"duration":356},"status":"failed","statusMessage":"AssertionError: assert False == True","statusTrace":"driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"47a4c967-3147-429e-864b-03f8b40d6483\")>\nuser = 'as@o.m', pwd = 'OK123123ok', confirm = 'OK123123ok', expected = True\nrequest = <FixtureRequest for <Function test_reg[valid-case-short-domain]>>\n\n    @pytest.mark.parametrize(\"user, pwd, confirm, expected\", params_input)\n    \n    \n    def test_reg(driver, user, pwd, confirm, expected,request):\n        page=IndexPage(driver)\n        page.open()\n    \n        def do_test():\n            reg_result=page.reg(user, pwd, confirm)\n            assert reg_result == expected\n            result = query_user_and_password(user, pwd)\n            if reg_result:\n                # 驗證是否寫入資料庫\n                assert result is not None, \"應該成功註冊，但資料庫找不到\"\n                assert result[0] == user\n                assert result[1] == pwd\n            else:\n                assert result is None, \"預期註冊失敗，但資料竟然寫入資料庫了\"\n    \n                # 測試後刪除資料\n            if result:\n                delete_user(user)\n    \n        pic = extract_parametrize_id(request)\n>       use_try(driver, do_test, pic)\n\ntests/test_reg.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscr/for_try.py:33: in use_try\n    raise e  # 將錯誤拋出給 pytest 判斷為失敗\n    ^^^^^^^\nscr/for_try.py:15: in use_try\n    func()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def do_test():\n        reg_result=page.reg(user, pwd, confirm)\n>       assert reg_result == expected\nE       assert False == True\n\ntests/test_reg.py:20: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1753167497241,"stop":1753167499195,"duration":1954},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False == True","statusTrace":"driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"47a4c967-3147-429e-864b-03f8b40d6483\")>\nuser = 'as@o.m', pwd = 'OK123123ok', confirm = 'OK123123ok', expected = True\nrequest = <FixtureRequest for <Function test_reg[valid-case-short-domain]>>\n\n    @pytest.mark.parametrize(\"user, pwd, confirm, expected\", params_input)\n    \n    \n    def test_reg(driver, user, pwd, confirm, expected,request):\n        page=IndexPage(driver)\n        page.open()\n    \n        def do_test():\n            reg_result=page.reg(user, pwd, confirm)\n            assert reg_result == expected\n            result = query_user_and_password(user, pwd)\n            if reg_result:\n                # 驗證是否寫入資料庫\n                assert result is not None, \"應該成功註冊，但資料庫找不到\"\n                assert result[0] == user\n                assert result[1] == pwd\n            else:\n                assert result is None, \"預期註冊失敗，但資料竟然寫入資料庫了\"\n    \n                # 測試後刪除資料\n            if result:\n                delete_user(user)\n    \n        pic = extract_parametrize_id(request)\n>       use_try(driver, do_test, pic)\n\ntests/test_reg.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscr/for_try.py:33: in use_try\n    raise e  # 將錯誤拋出給 pytest 判斷為失敗\n    ^^^^^^^\nscr/for_try.py:15: in use_try\n    func()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def do_test():\n        reg_result=page.reg(user, pwd, confirm)\n>       assert reg_result == expected\nE       assert False == True\n\ntests/test_reg.py:20: AssertionError","steps":[],"attachments":[{"uid":"5b9bfbf43989198c","name":"valid-case-short-domain","source":"5b9bfbf43989198c.png","type":"image/png","size":30546},{"uid":"6987662cc59e79f8","name":"stdout","source":"6987662cc59e79f8.txt","type":"text/plain","size":186}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1753167504778,"stop":1753167505438,"duration":660},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_reg"},{"name":"host","value":"fv-az1701-337"},{"name":"thread","value":"4512-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_reg"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"confirm","value":"'OK123123ok'"},{"name":"expected","value":"True"},{"name":"pwd","value":"'OK123123ok'"},{"name":"user","value":"'as@o.m'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"732f4781ed44c349.json","parameterValues":["'OK123123ok'","True","'OK123123ok'","'as@o.m'"]}